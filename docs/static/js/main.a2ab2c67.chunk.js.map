{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cata","console","log","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","image","GifExpertApp","categories","categoria","ReactDOM","render","document","getElementById"],"mappings":"mMAwCeA,EApCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAuBA,OACI,sBAAMC,SAhBW,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,GAE3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,KAEdO,QAAQC,IAAI,iBAOhB,SACI,uBACIC,KAAK,OACLC,MAAOX,EACPY,SA1Bc,SAACT,GAEvBF,EAAcE,EAAEU,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAgBZM,GAhBY,4CAAH,sDCCPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACjC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCDHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAItB,ECJwB,SAACA,GAEzB,MAA0BhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAhBAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GAEFC,YAAW,WACPjC,QAAQC,IAAI+B,GACZH,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,WAGZ,CAACpB,IAEGqB,EDnB0BM,CAAa3B,GAAjCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAUrB,OACI,qCACI,oBAAIJ,UAAU,wCAAd,SAAuDhB,IACtDoB,GAAW,mBAAGJ,UAAU,wCAAb,qBACZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAmB,GAAK,OACZ,cAAC,EAAD,eAEQA,GADCA,EAAMjB,aEYxBkB,EAnCM,WAIjB,MAAoC7C,mBAAS,CAAC,cAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAQA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ+C,EAAWrB,KAAI,SAAAsB,GAAS,OACpB,aAD0B,CACzB,EAAD,CAEI/B,SAAU+B,GADLA,Y,MCrBjCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a2ab2c67.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from \"prop-types\";\n\n\nconst AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setinputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        // console.log(e.target.value);\n        setinputValue(e.target.value);\n    }\n\n    // No usar la recarga de la pagina cuando se hace submit del form\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        // console.log(setCategories);\n\n        if (inputValue.trim().length > 2) {\n            // con el callback se puede usar el estado anterior del hook\n            setCategories(cata => [inputValue, ...cata]);\n            setinputValue('');\n        } else {\n            console.log('No se agrega');\n        }\n\n\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nexport default AddCategory\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","// Peticion a un api\nexport const getGifs = async (category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=cNlJiSR2u28i3WRPzaIv9A70rjJs77FM`\n\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url // ? pregunta si llega images\n        }\n    })\n\n    // console.log(gifs);\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url }) => {\n    return (\n        <div className=\"card animate__animated animate__backInLeft\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n// import { getGifs } from \"../helpers/getGifs\";\n\nexport const GifGrid = ({ category }) => {\n\n\n    // const [images, setImages] = useState([]);\n    const { data:images, loading } = useFetchGifs(category);\n\n    // Permite ejecutar la funcion una sola vez cuando el componente se renderiza la primera vez\n    // useEffect(() => {\n    //     getGifs(category)\n    //         .then(setImages);\n    // }, [category]) // si esque la categoria cambia en este componente, cosa que no porque cada categoria es un nuevo componente, haria ejecutar este useEffect\n\n    // getGifs();\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__backInLeft\">{category}</h3>\n            {loading && <p className=\"animate__animated animate__backInDown\">Loading</p>}\n            <div className=\"card-grid\">\n                {\n                    images.map(image => (\n                        <GifGridItem\n                            key={image.id}\n                            {...image} />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\n\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n\n        getGifs(category)\n            .then(imgs => {\n\n                setTimeout(() => {\n                    console.log(imgs)\n                    setState({\n                        data: imgs,\n                        loading: false\n                    })\n                }, 3500)\n            });\n\n    }, [category])\n\n    return state; // {data:[], loading: true}\n\n}","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n    // const [categories, setCategories] = useState(['One Punch', 'Samurai X', 'Dragon Ball'])\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd = () => {\n    //     // setCategories([...categories, 'Attack on Titan']);\n    //     setCategories(catAnterior => [...catAnterior, 'Attack on Titan']);\n    //     console.log(categories);\n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n\n            <ol>\n                {\n                    categories.map(categoria => ( // solo uso () para definir que retorna algo\n                        <GifGrid\n                            key={categoria}\n                            category={categoria} />\n                    ))\n                }\n            </ol>\n\n        </>\n    );\n\n}\n\n// crear componente fast rafcp\n\nexport default GifExpertApp;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}